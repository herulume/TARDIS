#+title: post-init
#+PROPERTY: header-args:emacs-lisp :lexical t :tangle ./post-init.el :mkdirp yes

# Time-stamp: <Last changed 2025-05-31 18:32:05>

* Header
#+begin_src emacs-lisp
;;; post-init.el --- run after init.el -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

* Compile Angel
#+begin_src emacs-lisp
;; Ensure adding the following compile-angel code at the very beginning
;; of your `~/.emacs.d/post-init.el` file, before all other packages.
(use-package compile-angel
  :ensure t
  :demand t
  :custom
  ;; Set `compile-angel-verbose` to nil to suppress output from compile-angel.
  ;; Drawback: The minibuffer will not display compile-angel's actions.
  (compile-angel-verbose t)

  :config
  ;; The following directive prevents compile-angel from compiling your init
  ;; files. If you choose to remove this push to `compile-angel-excluded-files'
  ;; and compile your pre/post-init files, ensure you understand the
  ;; implications and thoroughly test your code. For example, if you're using
  ;; `use-package', you'll need to explicitly add `(require 'use-package)` at
  ;; the top of your init file.
  (push "/init.el" compile-angel-excluded-files)
  (push "/early-init.el" compile-angel-excluded-files)
  (push "/pre-init.el" compile-angel-excluded-files)
  (push "/post-init.el" compile-angel-excluded-files)
  (push "/pre-early-init.el" compile-angel-excluded-files)
  (push "/post-early-init.el" compile-angel-excluded-files)

  ;; A local mode that compiles .el files whenever the user saves them.
  ;; (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode)

  ;; A global mode that compiles .el files before they are loaded.
  (compile-angel-on-load-mode))
#+end_src

* Update buffers to reflect file changes
#+begin_src emacs-lisp
;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(add-hook 'after-init-hook #'global-auto-revert-mode)
#+end_src

* recentf
#+begin_src emacs-lisp
;; recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(add-hook 'after-init-hook #'(lambda()
                               (let ((inhibit-message t))
                                 (recentf-mode 1))))
(add-hook 'kill-emacs-hook #'recentf-cleanup)
#+end_src

* savehist
#+begin_src emacs-lisp
;; savehist is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(add-hook 'after-init-hook #'savehist-mode)
#+end_src

* Remember last file location upon reopening
#+begin_src emacs-lisp
;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(add-hook 'after-init-hook #'save-place-mode)
#+end_src

* Remove mouse support
#+begin_src emacs-lisp
;; Remove mouse support
(use-package inhibit-mouse
  :ensure t
  :config
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'inhibit-mouse-mode)
    (inhibit-mouse-mode 1)))
#+end_src

* Magit
#+begin_src emacs-lisp
;; Magit
;; Needs compat and transient in this order due to a bug.
(use-package compat)
(use-package transient)
(use-package magit :after compat)
#+end_src

* Strip white-space
#+begin_src emacs-lisp
;; Strip white-space
(use-package stripspace
  :ensure t
  :defer t
  :commands stripspace-local-mode

  ;; Enable for prog-mode-hook, text-mode-hook, conf-mode-hook
  :hook ((prog-mode . stripspace-local-mode)
         (text-mode . stripspace-local-mode)
         (conf-mode . stripspace-local-mode))

  :custom
  ;; The `stripspace-only-if-initially-clean' option:
  ;; - nil to always delete trailing whitespace.
  ;; - Non-nil to only delete whitespace when the buffer is clean initially.
  ;; (The initial cleanliness check is performed when `stripspace-local-mode'
  ;; is enabled.)
  (stripspace-only-if-initially-clean t)

  ;; Enabling `stripspace-restore-column' preserves the cursor's column position
  ;; even after stripping spaces. This is useful in scenarios where you add
  ;; extra spaces and then save the file. Although the spaces are removed in the
  ;; saved file, the cursor remains in the same position, ensuring a consistent
  ;; editing experience without affecting cursor placement.
  (stripspace-restore-column t))
#+end_src

* Spell checker
#+begin_src emacs-lisp
;; Spell checker
(use-package ispell
  :ensure nil
  :defer t
  :commands (ispell ispell-minor-mode)
  :custom
  ;; Set the ispell program name to aspell
  (ispell-program-name "aspell")

  ;; Configures Aspell's suggestion mode to "ultra", which provides more
  ;; aggressive and detailed suggestions for misspelled words. The language
  ;; is set to "en_US" for US English, which can be replaced with your desired
  ;; language code (e.g., "en_GB" for British English, "de_DE" for German).
  (ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB")))

;; On-the-fly spell checking
(use-package flyspell
  :ensure nil
  :defer t
  :commands flyspell-mode
  :hook
  ((prog-mode . flyspell-prog-mode)
   (text-mode . (lambda()
                  (if (or (derived-mode-p 'yaml-mode)
                          (derived-mode-p 'yaml-ts-mode)
                          (derived-mode-p 'ansible-mode))
                      (flyspell-prog-mode)
                    (flyspell-mode 1)))))
  :config
  ;; Remove strings from Flyspell
  (setq flyspell-prog-text-faces (delq 'font-lock-string-face
                                       flyspell-prog-text-faces))

  ;; Remove doc from Flyspell
  (setq flyspell-prog-text-faces (delq 'font-lock-doc-face
                                       flyspell-prog-text-faces)))
#+end_src

* Completion
#+begin_src emacs-lisp
;; Code completion
(use-package corfu
  :ensure t
  :defer t
  :commands (corfu-mode global-corfu-mode)

  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))

  :custom
  ;; Hide commands in M-x which do not apply to the current mode.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Disable Ispell completion function. As an alternative try `cape-dict'.
  (text-mode-ispell-word-completion nil)
  (tab-always-indent 'complete)

  ;; Enable Corfu
  :config
  (global-corfu-mode))

(use-package cape
  :ensure t
  :defer t
  :commands (cape-dabbrev cape-file cape-elisp-block)
  :bind ("C-c p" . cape-prefix-map)
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))

(use-package vertico
  ;; (Note: It is recommended to also enable the savehist package.)
  :ensure t
  :defer t
  :commands vertico-mode
  :hook (after-init . vertico-mode))

(use-package orderless
  ;; Vertico leverages Orderless' flexible matching capabilities, allowing users
  ;; to input multiple patterns separated by spaces, which Orderless then
  ;; matches in any order against the candidates.
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package marginalia
  ;; Marginalia allows Embark to offer you preconfigured actions in more contexts.
  ;; In addition to that, Marginalia also enhances Vertico by adding rich
  ;; annotations to the completion candidates displayed in Vertico's interface.
  :ensure t
  :defer t
  :commands (marginalia-mode marginalia-cycle)
  :hook (after-init . marginalia-mode))

(use-package embark
  ;; Embark is an Emacs package that acts like a context menu, allowing
  ;; users to perform context-sensitive actions on selected items
  ;; directly from the completion interface.
  :ensure t
  :defer t
  :commands (embark-act
             embark-dwim
             embark-export
             embark-collect
             embark-bindings
             embark-prefix-help-command)
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package consult
  :ensure t
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)
         ("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x t b" . consult-buffer-other-tab)
         ("C-x r b" . consult-bookmark)
         ("C-x p b" . consult-project-buffer)
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)
         ("M-s e" . consult-isearch-history)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)
         ("M-r" . consult-history))

  ;; Enable automatic preview at point in the *Completions* buffer.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  :init
  ;; Optionally configure the register formatting. This improves the register
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<"))
#+end_src

* LSP
#+begin_src emacs-lisp
;; LSP
(use-package eglot
  :ensure nil
  :defer t
  :commands (eglot
             eglot-ensure
             eglot-rename
             eglot-format-buffer)
  :config
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd")))
#+end_src

* ELisp
#+begin_src emacs-lisp
;; Elisp

;; Enables automatic indentation of code while typing
(use-package aggressive-indent
  :ensure t
  :defer t
  :commands aggressive-indent-mode
  :hook
  (emacs-lisp-mode . aggressive-indent-mode))

;; Highlights function and variable definitions in Emacs Lisp mode
(use-package highlight-defined
  :ensure t
  :defer t
  :commands highlight-defined-mode
  :hook
  (emacs-lisp-mode . highlight-defined-mode))

;; Prevent parenthesis imbalance
(use-package paredit
  :ensure t
  :defer t
  :commands paredit-mode
  :hook
  (emacs-lisp-mode . paredit-mode)
  :config
  (define-key paredit-mode-map (kbd "RET") nil))

;; Displays visible indicators for page breaks
(use-package page-break-lines
  :ensure t
  :defer t
  :commands (page-break-lines-mode
             global-page-break-lines-mode)
  :hook
  (emacs-lisp-mode . page-break-lines-mode))

;; Provides functions to find references to functions, macros, variables,
;; special forms, and symbols in Emacs Lisp
(use-package elisp-refs
  :ensure t
  :defer t
  :commands (elisp-refs-function
             elisp-refs-macro
             elisp-refs-variable
             elisp-refs-special
             elisp-refs-symbol))
#+end_src

* Rust
#+begin_src emacs-lisp
;; Rust
(use-package rust-mode
  :ensure t
  ;;:init
  ;;(setq rust-mode-treesitter-derive t)
  :hook
  (rust-mode . eglot-ensure))

(use-package cargo
  :ensure t
  :hook
  (rust-mode . cargo-minor-mode))
#+end_src

* C
Install [clangd](https://clangd.llvm.org/installation.html).
#+begin_src emacs-lisp
;; C
(use-package c-mode
  :elpaca nil
  :hook
  (c-mode . eglot-ensure))
#+end_src

* Perl
#+begin_src emacs-lisp
;;(fset 'perl-mode 'cperl-mode)
;;(setq cperl-invalid-face nil)
;;(setq cperl-indent-parens-as-block t)
;;(setq cperl-close-paren-offset (- cperl-indent-level))
#+end_src

* Prolog
#+begin_src emacs-lisp
(use-package sweeprolog
  :ensure t
  :config
  (setq prolog-system 'swi
      prolog-program-switches '((swi ("-G128M" "-T128M" "-L128M" "-O"))
                                (t nil))
      prolog-electric-if-then-else-flag t))

(use-package ediprolog
  :ensure t
  :config
  (setq ediprolog-system 'swi)
  :bind (:map prolog-mode-map
            ("C-c C-e" . ediprolog-dwim)))
#+end_src

* Buffer terminator
#+begin_src emacs-lisp
(use-package buffer-terminator
  :ensure t
  :custom
  (buffer-terminator-verbose nil)
  :config
  (buffer-terminator-mode 1))
#+end_src

* Balance windows
#+begin_src emacs-lisp
(use-package zoom
  :ensure t
  :init
  (setq zoom-mode t))
#+end_src

* Terminal
#+begin_src emacs-lisp
(use-package eat
  :ensure t)
#+end_src

* Org
:D I love org-mode. https://orgmode.org/worg/org-tutorials/encrypting-files.html
Huge thanks to Rainer König.
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :defer t
  :commands (org-mode org-version)
  :mode
  ("\\.org\\'" . org-mode)
  :custom
  (org-hide-leading-stars t)
  (org-startup-indented t)
  (org-adapt-indentation nil)
  (org-edit-src-content-indentation 0)
  (org-startup-truncated t)
  (org-fontify-done-headline t)
  (org-fontify-todo-headline t)
  (org-fontify-whole-heading-line t)
  (org-fontify-quote-and-verse-blocks t)
  ;; Align tags on my screen
  (org-tags-column 0)
  ;; Agends and life organisation
  (org-agenda-files '("~/org/private.org")) ;; Default to private life
  (org-log-into-drawer t)
  (org-log-reschedule 'note)
  (org-enforce-todo-dependencies t)
  (org-track-ordered-property-with-tag t)
  (org-agenda-dim-blocked-tasks t)
  (org-enforce-todo-checkbox-dependencies t)
  (org-clock-into-drawer "CLOCKING")
  (org-agenda-custom-commands
   (quote
    (
     ("A" . "Agendas")
     ("AT" "Daily overview"
      ((tags-todo "URGENT"
                  ((org-agenda-overriding-header "Urgent Tasks")))
       (tags-todo "RADAR"
                  ((org-agenda-overriding-header "On my radar")))
       (tags-todo "PHONE+TODO=\"NEXT\""
                  ((org-agenda-overriding-header "Phone Calls")))
       (tags-todo "Depth=\"Deep\"/NEXT"
                  ((org-agenda-overriding-header "Next Actions requiring deep work")))
       (agenda ""
               ((org-agenda-overriding-header "Today")
                (org-agenda-span 1)
                (org-agenda-sorting-strategy
                 (quote
                  (time-up priority-down)))))
       nil nil))
     ("AW" "Weekly overview" agenda ""
      ((org-agenda-overriding-header "Weekly overview")))
     ("AM" "Monthly overview" agenda ""
      ((org-agenda-overriding-header "Monthly overview"))
      (org-agenda-span
       (quote month))
      (org-deadline-warning-days 0)
      (org-agenda-sorting-strategy
       (quote
        (time-up priority-down tag-up))))
     ("W" . "Weekly Review Helper")
     ("Wn" "New tasks" tags "NEW"
      ((org-agenda-overriding-header "NEW Tasks")))
     ("Wd" "Check DELEGATED tasks" todo "DELEGATED"
      ((org-agenda-overriding-header "DELEGATED tasks")))
     ("Ww" "Check WAITING tasks" todo "WAITING"
      ((org-agenda-overriding-header "WAITING tasks")))
     ("Ws" "Check SOMEDAY tasks" todo "SOMEDAY"
      ((org-agenda-overriding-header "SOMEDAY tasks")))
     ("Wf" "Check finished tasks" todo "DONE|CANCELLED|FORWARDED"
      ((org-agenda-overriding-header "Finished tasks")))
     ("WP" "Planing ToDos (unscheduled) only" todo "TODO|NEXT"
      ((org-agenda-overriding-header "Planning overview")
       (org-agenda-skip-function
        (quote
         (org-agenda-skip-entry-if
          (quote scheduled)
          (quote deadline)))))))))
  (org-capture-templates
   (quote
    (
     ;; Goals
     ("G" "Define a goal" entry (file+headline "~/org/capture.org" "Capture") (file "~/org/tpl-goal.txt") :empty-lines-after 2)
     ;; Same same, diff tag
     ("N" "NEXT entry" entry (file+headline "~/org/capture.org" "Capture") (file "~/org/tpl-next.txt") :empty-lines-before 1)
     ("T" "TODO entry" entry (file+headline "~/org/capture.org" "Capture") (file "~/org/tpl-todo.txt") :empty-lines-before 1)
     ("W" "WAITING entry" entry (file+headline "~/org/capture.org" "Capture") (file "~/org/tpl-waiting.txt") :empty-lines-before 1)
     ("S" "SOMEDAY entry" entry (file+headline "~/org/capture.org" "Capture") (file "~/org/tpl-someday.txt") :empty-lines-before 1)
     ("P" "PROJ entry" entry (file+headline "~/org/capture.org" "Capture") (file "~/org/tpl-proj.txt") :empty-lines-before 1)
     ;; Books
     ("B" "Book on the to-read-list" entry (file+headline "~/org/private.org" "Books to read") (file "~/org/tpl-book.txt") :empty-lines-after 2)
     ;; Daily
     ("p" "Create a daily plan")
     ("pP" "Daily plan private" plain (file+olp+datetree "~/org/plan-free.org") (file "~/org/tpl-dailyplan.txt") :immediate-finish t)
     ("pW" "Daily plan work" plain (file+olp+datetree "~/org/plan-work.org") (file "~/org/tpl-dailyplan.txt") :immediate-finish t)
     ;; Journal
     ("j" "Journal entry")
     ("jP" "Journal entry private" entry (file+olp+datetree "~/org/journal-private.org") "* %U - %^{Activity}")
     ("jW" "Journal entry work " entry (file+olp+datetree "~/org/journal-work.org") "* %U - %^{Activity}"))))
  :hook
  (org-after-todo-state-change-hook . org-checklist)
  :config
  ;; Helps to align column view
  (set-face-attribute 'org-column nil
                      :inherit 'default)
  :bind
  ("\C-ca" . 'org-agenda)
  ("<f6>" . 'org-capture))

;;
(defun org-reset-checkbox-state-maybe ()
  "Reset all checkboxes in an entry if the `RESET_CHECK_BOXES' property is set"
  (interactive "*")
  (if (org-entry-get (point) "RESET_CHECK_BOXES")
      (org-reset-checkbox-state-subtree)))

(defun org-checklist ()
  (when (member org-state org-done-keywords) ;; org-state dynamically bound in org.el/org-todo
    (org-reset-checkbox-state-maybe)))

;; Functions to help focus
(defun herulume/org-focus-private()
  "Set focus on private things."
  (interactive)
  (setq org-agenda-files '("~/org/private.org")))

(defun herulume/org-focus-work()
  "Set focus on work things."
  (interactive)
  (setq org-agenda-files '("~/org/work.org")))

(defun herulume/org-focus-free()
  "Set focus on non-work things."
  (interactive)
  (setq org-agenda-files '("~/org/private.org")))

(defun herulume/org-focus-all()
  "Set focus on all things."
  (interactive)
  (setq org-agenda-files '("~/org/work.org" "~/org/private.org")))

;; Org-bullets
(use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

* Olivetii
Nice writing environment.
#+begin_src emacs-lisp
(use-package olivetti
  :ensure t)
#+end_src

* Calendar
#+begin_src emacs-lisp
;; First day of the week: 0:Sunday, 1:Monday.
(defvar calendar-week-start-day 1)

;; Use European date format (DD/MM/YYYY or 9 October 2024).
(defvar calendar-date-style 'european)
#+end_src

* Elfeed
RSS feed
#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :custom
  (url-queue-timeout 30)
  (elfeed-search-filter "@1-day-ago +unread -politics"))


(use-package elfeed-org
  :ensure t
  :custom
  (rmh-elfeed-org-files (list "~/dev/TARDIS/elfeed.org"))
  :init
  (elfeed-org))

#+end_src

* Ruler at 80 characters
#+begin_src emacs-lisp
;; global-display-column-indicator-mode
(setopt display-fill-column-indicator-column 80)
#+end_src

* Confirm to quit
#+begin_src emacs-lisp
;; C-a C-x C-c
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

* Timestamp
#+begin_src emacs-lisp
;; When there is a "Time-stamp: <>" string in the first 10 lines of the file,
;; Emacs will write time-stamp information there when saving the file.
;; (Borrowed from http://home.thep.lu.se/~karlf/emacs.html)
;; (And https://olddeuteronomy.github.io/post/emacs-time-stamp/)
(setq time-stamp-active t          ; Do enable time-stamps.
      time-stamp-line-limit 10     ; Check first 10 buffer lines for Time-stamp: <>
      time-stamp-format "Last changed %Y-%02m-%02d %02H:%02M:%02S")
(add-hook 'write-file-hooks 'time-stamp) ; Update when saving.
#+end_src

* Theme and Font
#+begin_src emacs-lisp
;; Dracula theme
(mapc #'disable-theme custom-enabled-themes)  ; Disable all active themes
(use-package dracula-theme
  :ensure t
  :config
  (load-theme 'dracula :noconfirm))

;; Iosevka Term
(set-face-attribute 'default nil
                    :height 130 :weight 'normal :family "Iosevka Term")
#+end_src

* Margo
#+begin_src emacs-lisp
(require 'cl-lib)
(defun herulume/margo (start end)
  "i'M A biG BelIEVer iN ranDoM caPitALIZaTION."
  (interactive
   (if (use-region-p)
       (list (region-beginning) (region-end))
     (list (point-min) (point-max))))
  (save-excursion
    (let* ((text (buffer-substring-no-properties start end))
           (random-text
            (apply #'string
                   (cl-loop for char across text
                            collect
                            (if (eq (char-syntax char) ?w)
                                ;; only randomize letters
                                (if (zerop (random 2))
                                    (upcase char)
                                  (downcase char))
                              char)))))
      (delete-region start end)
      (goto-char start)
      (insert random-text))))
#+end_src

* Kill all buffers
Execute Order 66
#+begin_src emacs-lisp
(defun herulume/execute-order-66 ()
  "Kill all buffers, leaving *scratch* only."
  (interactive)
  (mapc
   (lambda (buffer)
     (kill-buffer buffer))
   (buffer-list))
  (delete-other-windows))
#+end_src

* Copy Org IDs
Credit to Rainer König.
#+begin_src emacs-lisp
(defun herulume/copy-idlink-to-clipboard()
  "Copy an ID link with the headline to killring,
if no ID is there then create a new unique ID.
This function works only in org-mode or org-agenda buffers.
The purpose of this function is to easily construct id:-links to
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
       (interactive)
       (when (eq major-mode 'org-agenda-mode) ;if we are in agenda mode we switch to orgmode
	 (org-agenda-show)
	 (org-agenda-goto))
       (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
	 (setq mytmphead (nth 4 (org-heading-components)))
         (setq mytmpid (funcall 'org-id-get-create))
	 (setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead))
	 (kill-new mytmplink)
	 (message "Copied %s to killring (clipboard)" mytmplink)
       ))

(global-set-key (kbd "<f5>") 'herulume/copy-idlink-to-clipboard)
#+end_src
