#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Startup Performance

Make startup faster by reducing the frequency of garbage collection.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

#+end_src

* Welcome

This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  (defvar herulume/default-font-size 130)
  (defvar herulume/default-variable-font-size 130)

#+end_src

* Package System Setup

Check [[https://github.com/jwiegley/use-package][use-package]] for more information

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Keep .emacs.d clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

#+begin_src emacs-lisp

  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)
  (require 'no-littering)

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

* Auto-refresh buffers when files change

#+begin_src emacs-lisp

  (global-auto-revert-mode t)

#+end_src
* Basic UI Configuration

Remove unneeded elements, add line and column numbers.

#+begin_src emacs-lisp

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10)        ; Give some breathing room

    (menu-bar-mode -1)            ; Disable the menu bar

    ;; Set up the visible bell
    (setq visible-bell t)

    ;; Column and line numbers
    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    vterm-mode-hook
                    eshell-mode-hook
                    dired-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code" :height herulume/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height herulume/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height herulume/default-font-size :weight 'regular)

#+end_src

* UI Configuration

** Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-tomorrow-night t))

#+end_src

** Modeline

Check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
    (counsel-mode 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Dashboard

#+begin_src emacs-lisp

  (use-package dashboard
    :config
    (setq dashboard-startup-banner 2)
    (setq dashboard-center-content t)
    (setq dashboard-set-footer nil)
    (setq dashboard-set-init-info nil)
    (setq dashboard-banner-logo-title nil)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)


    (setq dashboard-items '((bookmarks . 5)
                            (recents  . 5)
                            (projects . 10)))

    (dashboard-setup-startup-hook))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =herulume/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun herulume/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Org Agenda auxiliar functions

[[https://github.com/hlissner/doom-emacs/blob/2d2246d7ca5ec084f4bee9a5de14256eb6828837/modules/lang/org/config.el][Doom Emacs]] configuration for org-habit display in org-agenda.

#+begin_src emacs-lisp

(defvar +org-habit-graph-padding 2
  "The padding added to the end of the consistency graph")

(defvar +org-habit-min-width 30
  "Hides the consistency graph if the `org-habit-graph-column' is less than this value")

(defvar +org-habit-graph-window-ratio 0.3
  "The ratio of the consistency graphs relative to the window width")

(defun +org-habit-resize-graph-h ()
  "Right align and resize the consistency graphs based on `+org-habit-graph-window-ratio'"
  (when (featurep 'org-habit)
    (let* ((total-days (float (+ org-habit-preceding-days org-habit-following-days)))
           (preceding-days-ratio (/ org-habit-preceding-days total-days))
           (graph-width (floor (* (window-width) +org-habit-graph-window-ratio)))
           (preceding-days (floor (* graph-width preceding-days-ratio)))
           (following-days (- graph-width preceding-days))
           (graph-column (- (window-width) (+ preceding-days following-days)))
           (graph-column-adjusted (if (> graph-column +org-habit-min-width)
                                      (- graph-column +org-habit-graph-padding)
                                    nil)))
          (setq-local org-habit-preceding-days preceding-days)
          (setq-local org-habit-following-days following-days)
          (setq-local org-habit-graph-column graph-column-adjusted))))


#+end_src

** Basic Configuration

#+begin_src emacs-lisp

  (defun herulume/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook ((org-mode . herulume/org-mode-setup)
           (org-agenda-mode . +org-habit-resize-graph-h))
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config
    (require 'org-habit)
    (require 'org-timer)
    (add-to-list 'org-modules 'org-habit)

    (setq org-clock-sound "~/dev/TARDIS/bell.wav")

    (setq org-ellipsis " ▾")
    (herulume/org-font-setup)

    (setq org-directory "~/dev/Personal/org/")
    (setq org-agenda-files (directory-files-recursively "~/dev/Personal/org/" "\\.org$"))
    (setq org-agenda-window-setup 'current-window)

    (setq org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "NEXT(n)" "WAITING(w@/!)" "|" "DONE(d!)" "SKIP(@)" "CANCELED(c@)")))

    (setq org-agenda-custom-commands
          '(("d" "Today's Tasks"
             ((tags-todo
               "GHD+ACTIVE+PRIORITY=\"A\""
               ((org-agenda-files '("~/dev/Personal/org/goals.org"))
                (org-agenda-overriding-header "Primary goals for this month")))
              (tags-todo
               "GHD+ACTIVE+PRIORITY=\"C\""
               ((org-agenda-files '("~/dev/Personal/org/goals.org"))
                (org-agenda-overriding-header "Secondary goals for this month")))
              (agenda "" ((org-agenda-start-day ".")
                          (org-agenda-span 1)
                          (org-agenda-overriding-header "Today")))
              (tags "remember"))) 

            ("w" "This Week's Tasks"
             ((tags-todo
               "GHD+ACTIVE+PRIORITY=\"A\""
               ((org-agenda-files '("~/dev/Personal/org/goals.org"))
                (org-agenda-overriding-header "Primary goals for this month")))
              (tags-todo
               "GHD+ACTIVE+PRIORITY=\"C\""
               ((org-agenda-files '("~/dev/Personal/org/goals.org"))
                (org-agenda-overriding-header "Secondary goals for this month")))
              (agenda)))))

    (setq org-agenda-prefix-format '((agenda . " %i %-20:c%?-12t%-6e% s")
                                     (todo   . " %i %-20:c %-6e")
                                     (tags   . " %i %-20:c")
                                     (search . " %i %-20:c")))


    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-tag-alist
          '((:startgroup)
             ; Put mutually exclusive tags here
            (:endgroup)
            ("errand" . ?E)
            ("home" . ?H)
                ("health" . ?h)
            ("work" . ?W)
            ("university" . ?U)
            ("pleasure" . ?P)))

    (setq org-capture-templates
          '(
            ;; Bujo workflow
            ("d" "Dailies Workflow")
            ("dj" "Daily TODOS" entry
             (file+olp+datetree "~/dev/Personal/org/journal.org")
             "** Summary \n#+BEGIN: clocktable :scope tree4 :maxlevel 5 :block untilnow \n#+END: \n** Daily TODOS [\%] \n" :tree-type day)
            ("dt" "Daily TODO" plain
             (file "~/dev/Personal/org/journal.org")
             "***** TODO %? \nSCHEDULED: %^t \n:PROPERTIES:\n:Category: Daily\n:Effort:   %^{Effort} \n:END: \n")
            ;; Remeinder workflow
            ("r" "Remember Workflow")
            ("rt" "TODO" entry (file+headline "~/dev/Personal/org/remember.org" "Tasks")
             "** TODO %?                     :remember:\nSCHEDULED: %^T \n")
            ("re" "Event" entry (file+headline "~/dev/Personal/org/remember.org" "Events")
             "** %? \n %^T                     :remember:\n")
            ("rn" "Note" entry (file+headline "~/dev/Personal/org/remember.org" "Notes")
             "** %<%H:%M> %?                     :remember:\n")
            ;; Email workflow
            ("m" "Email Workflow")
            ("mf" "Follow Up" entry (file+olp "~/dev/Personal/org/Mail.org" "Follow Up")
             "* TODO Follow up with %:fromname on %a\nSCHEDULED:%^t\n\n%i")
            ("mr" "Read Later" entry (file+olp "~/dev/Personal/org/Mail.org" "Read Later")
             "* TODO Read %:subject\nSCHEDULED:%^t\n%a\n\n%i")))

    (setq org-refile-targets '((nil :maxlevel . 1)
                               (org-agenda-files :maxlevel . 1))))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.

#+begin_src emacs-lisp

  (defun herulume/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . herulume/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun herulume/org-babel-tangle-config ()
    (interactive)
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dev/TARDIS/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'herulume/org-babel-tangle-config)))

#+end_src

** Fancy priorities

#+begin_src emacs-lisp

  (use-package org-fancy-priorities
      :hook
      (org-mode . org-fancy-priorities-mode)
      :config
      (setq org-fancy-priorities-list '((?A . "❗")
                                        (?B . "⬆")
                                        (?C . "⬇")
                                        (?D . "☕")
                                        (?1 . "⚡")
                                        (?2 . "⮬")
                                        (?3 . "⮮")
                                        (?4 . "☕")
                                        (?I . "Important"))))

#+end_src

* Email

** Mu4e

Use mu4e.

#+begin_src emacs-lisp

  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :defer 20
    :bind ("C-c M" . mu4e)
    :config
    (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-headers-skip-duplicates t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    (setq mu4e-compose-context-policy 'ask)

    ;; Make sure plain text mails flow correctly for recipients
    (setq mu4e-compose-format-flowed t)

    ;; Configure the function to use for sending mail
    (setq message-send-mail-function 'smtpmail-send-it)

    (setq mu4e-compose-signature
      (concat
        "(Sent from Emacs)"))



    (setq mu4e-contexts
      (list
        ;; Work account
        (make-mu4e-context
          :name "Social"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Social" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "social.herulume@gmail.com")
                  (user-full-name    . "Eduardo Jorge Barbosa")
                  (smtpmail-smtp-server  . "smtp.gmail.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-stream-type  . starttls)
                  (mu4e-drafts-folder  . "/Social/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Social/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Social/All Mail")
                  (mu4e-trash-folder  . "/Social/[Gmail]/Trash")))

         ;; Work account
         (make-mu4e-context
          :name "Personal"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Herulume" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "herulume@gmail.com")
                  (user-full-name    . "Eduardo Barbosa")
                  (smtpmail-smtp-server  . "smtp.gmail.com")
                  (smtpmail-smtp-service . 465)
                  (smtpmail-stream-type  . ssl)
                  (mu4e-drafts-folder  . "/Herulume/[Gmail]/Drafts")
                  (mu4e-sent-folder  . "/Herulume/[Gmail]/Sent Mail")
                  (mu4e-refile-folder  . "/Herulume/All Mail")
                  (mu4e-trash-folder  . "/Herulume/[Gmail]/Trash")))))

    (setq mu4e-maildir-shortcuts
      '((:maildir "/Herulume/Inbox"             :key ?i)
        (:maildir "/Herulume/[Gmail]/Sent Mail" :key ?s)
        (:maildir "/Herulume/[Gmail]/Trash"     :key ?t)
        (:maildir "/Herulume/[Gmail]/Drafts"    :key ?d)
        (:maildir "/Herulume/[Gmail]/All Mail"  :key ?a)))

    (setq herulume/mu4e-inbox-query
          "(maildir:/Herulume/Inbox OR maildir:/Social/Inbox) AND flag:unread"))

#+end_src 

** Email alerts

Use libnotify to send a notifcation when a new email is sync'ed. 

#+begin_src emacs-lisp

  (use-package mu4e-alert
      :after mu4e
      :config
      ;; Use libnotify
      (mu4e-alert-set-default-style 'libnotify)

      ;; Show unread emails from all inboxes
      (setq mu4e-alert-interesting-mail-query herulume/mu4e-inbox-query)

      ;; Show notifications for mails already notified
      (setq mu4e-alert-notify-repeated-mails nil)

      (mu4e-alert-enable-notifications))

#+end_src

** HTML emails

#+begin_src emacs-lisp

  (use-package org-mime
    :config
    (setq org-mime-export-options '(:section-numbers nil
                                    :with-author nil
                                    :with-toc nil)))

#+end_src

* Development

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/dev")
      (setq projectile-project-search-path '("~/dev")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . efs/lsp-mode-setup)
           (elixir-mode . lsp)
           (go-mode . lsp))
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Snippets

[[https://github.com/joaotavora/yasnippet][Yasnippet]] is the de facto snippet system in Emacs.

#+begin_src emacs-lisp

  (use-package yasnippet
    :config
    (yas-global-mode))

 (use-package yasnippet-snippets)

#+end_src

** Languages

*** Agda

#+begin_src emacs-lisp

;;  (use-package agda2-mode
;;    :config
;;    (load-file (let ((coding-system-for-read 'utf-8))
;;            (shell-command-to-string "agda-mode locate")))
;;    (setq agda2-directory "/home/herulume/Downloads/Agda-nightly-data/emacs-mode/")
;;    (setq agda2-program-args
;;          (quote
;;           ("+RTS" "-K256M" "-H6G" "-M6G" "-A128M" "-RTS"))))
;;
#+end_src

*** Elixir

#+begin_src emacs-lisp

  (use-package elixir-mode)

  (use-package exunit
    :init (add-hook 'elixir-mode-hook 'exunit-mode))

  (add-to-list 'exec-path "~/.local/bin/elixir-lsp")

#+end_src

*** Go

#+begin_src emacs-lisp

  (use-package go-mode)

#+end_src
* Terminals and Shells

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :bind (("C-c t" . vterm))
    :config
    ;(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    (setq vterm-shell "bash")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

- =n= - next line
- =p= - previous line
- =j= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= - Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")
             (dired-dwim-target t)))

  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :config
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))

#+end_src

* My Functions

** Margo

#+begin_src emacs-lisp

  (defun herulume/margo ()
    "i'M A biG BelIEVer iN ranDoM caPitALIZaTION."
    (interactive)
    (let ((i 0)
          (return-string "")
          (input (buffer-substring-no-properties (point-min) (point-max))))
      (while (< i (- (point-max) (point-min)))
        (let ((current-char (substring input i (+ i 1))))
          (if (= (random 2) 0)
              (setq return-string
                    (concat return-string (upcase current-char)))
            (setq return-string
                  (concat return-string (downcase current-char)))))
        (setq i (+ i 1)))
      (let ((l (point)))
        (delete-region (point-min) (point-max))
        (insert return-string)
        (goto-char l))))

#+end_src

** Pomodoro

#+begin_src emacs-lisp

  (defun herulume/pomodoro ()
    "Start a pomodoro sequence"
    (interactive)

    (setq pomodoro-session 0)
    (while (< pomodoro-session 3)
      (herulume/pomodoro-work)
      (herulume/pomodoro-short-break)
      (setq pomodoro-session (1+ pomodoro-session)))

    (herulume/pomodoro-work)
    (herulume/pomodoro-long-break))

  (defun herulume/pomodoro-work ()
    "Start a pomodoro work timer"
    (interactive)
    (org-timer-set-timer 25))

  (defun herulume/pomodoro-short-break ()
    "Start a pomodoro short break timer"
    (interactive)
    (org-timer-set-timer 5))

  (defun herulume/pomodoro-long-break ()
    "Start a pomodoro long break timer"
    (interactive)
    (org-timer-set-timer 20)) ; 15-30

  (defun herulume/pomodoro-stop ()
    "Stop a pomodoro timer"
    (interactive)
    (org-timer-stop))

  (defun herulume/pomodoro-pause-or-continue ()
    "Pause or continue a pomodoro timer"
    (interactive)
    (org-timer-pause-or-continue))

  (defun herulume/pomodoro-show-timer ()
    "Show pomodoro timer"
    (interactive)
    (org-timer-show-remaining-time))

#+end_src

* Testing

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))

  (global-set-key (kbd "<C-down>") 'shrink-window)
  (global-set-key (kbd "<C-up>") 'enlarge-window) 
  (global-set-key (kbd "<C-right>") 'shrink-window-horizontally)
  (global-set-key (kbd "<C-left>") 'enlarge-window-horizontally)  

  (use-package undo-tree
  :config
  (global-undo-tree-mode))

  (use-package yaml-mode)

  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward))

  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  (use-package reftex
    :defer t
    :config
    (setq reftex-cite-prompt-optional-args t)) ;; Prompt for empty optional arguments in cite

  (use-package auto-dictionary
    :init(add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1))))

  (use-package company-auctex
    :init (company-auctex-init))

  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config (progn
              (setq TeX-source-correlate-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-auto-save t)
              (setq TeX-parse-self t)
              ;;                (setq-default TeX-master "paper.tex")
              (setq reftex-plug-into-AUCTeX t)
              (pdf-tools-install)
              (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
                    TeX-source-correlate-start-server t)
              ;; Update PDF buffers after successful LaTeX runs
              (add-hook 'TeX-after-compilation-finished-functions
                        #'TeX-revert-document-buffer)
              (add-hook 'LaTeX-mode-hook
                        (lambda ()
                          (reftex-mode t)
                          (flyspell-mode t)))
              ))


#+end_src

* End Config

Make gc pauses faster by decreasing the threshold.

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))

 #+end_src
